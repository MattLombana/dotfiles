" NOTE: If sections are collapsed, za will reopen them. similarly <space> f has been remapped to za
"       ff<space> will open all folds, and <space>ff will close all folds


"""""""""""""""""""""""""""""""""""""Personal Vim Configurations""""""""""""""""""""""""""""""""""""

set autoread                                    " Auto read when a file is changed from the outside
au FocusGained,BufEnter * checktime             " check when the buffer is entered

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set encoding=utf8
set ffs=unix,dos,mac

" Change PWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

set backspace=eol,start,indent                  " Configure backspace to be normal backspace
set whichwrap +=<,>,h,l                         " move to next line if at the end

set lazyredraw                                  " don't redraw when executing macros (better performance)

set magic                                       " Turn magic on for regexes

set showmatch                                   " Show matching brackets when text hovers
set mat=2                                       " how many tenths of a second to blink when matching brackets

set foldcolumn=1                                " Add some extra margin to the left of the numbers

set laststatus=2                                " Always display the status line

" TODO: fix this?
" Print if paste is enabled, current direcotry, the last line and column
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWdirectoryD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['readonly', 'filename', 'modified'],
      \           ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"ðŸ”’":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }

" use `0` to go to the beggining of the line
map 0 ^


" Remap leader-e to edit vim config
map <leader>e :e! ~/.vim/vimrc<CR>
" Auto reload vimrc
autocmd! bufwritepost ~/.vim/vimrc source ~/.vim/vimrc


" Bash like keys for the command line
cnoremap <C-A>        <Home>
cnoremap <C-E>        <End>
cnoremap <C-K>        <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" General abbreviation
iab xdate <C-r>=strftime("%d/%m/%y %H:%M:%S")<cr>

" {{{
    " Disable bells on errors
    set noerrorbells
    set novisualbell
    set t_vb=
    set tm=500
    " Similar for MacVIM
    if has("gui_macvim")
        autocmd GUIEnter * set vb t_vb=
    endif
" }}}

let g:snipMate = { 'snippet_version' : 1  }

let vim_markdown_folding_disabled = 1

if exists('$TMUX')
    if has('nvim')
        set termguicolors
    else
        set term=screen-256color
    endif
endif


" Tabline Show Tabline
" {{{
function! CustomizedTabLine()
    let s = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
        let buflist = tabpagebuflist(i)
        let winnr = tabpagewinnr(i)
        let s .= '%' . i . 'T'
        let s .= (i == t ? '%1*' : '%2*')
        let s .= ' '
        let s .= i . ':'
        let s .= '%*'
        let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
        let file = bufname(buflist[winnr - 1])
        let file = fnamemodify(file, ':p:t')
        if file == ''
            let file = '[No Name]'
        endif
        let s .= file
        let s .= ' '
        let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
endfunction

" Always show the tablilne
set stal=2
set tabline=%!CustomizedTabLine()
" }}}


" {{{
    filetype plugin indent on
    execute pathogen#infect()
" }}}


" Appearance
" {{{
    set background=dark                         " Set a dark background
    colorscheme peaksea                         " Use the modifiedsPeaksea
    syntax enable                               " enable Syntax highlighting
    set so=7                                    " Set 7
    set cmdheight=1                             " Set the height of the command bar
    set hid                                     " Hide buffers when they are abandoned
" }}}

" Menus
" {{{
    set wildmenu                                " Visual autocomplete for command menu
    set history=500                             " Remember 500 commands
" }}}


" Compatibility
" {{{
    set nocompatible                            " Disable vi compatibility mode
" }}}


" Mouse, Scrolling, Tabs, and Windows
" {{{
    let mapleader = ","                         " Use comma as the leader
    "set mouse=a                                 " Enable mouse for all modes
    set mousefocus                              " Window focus follows mouse
    set mousehide                               " Hide mouse pointer when characters are typed
    set scrolloff=10                            " Keep at least x lines above/below cursor if possilbe
    set whichwrap+=<,>,[,],h,l,                 " <Left>, <Right>, h, and l wrap around line breaks
    set nostartofline                           " Don't reset cursor to start of line when moving around
    set cursorline                              " Show a horizontal line underneath the cursor
    " Close the last window automatically if it is a quickfix/location list window
    :autocmd WinEnter * if &buftype ==# 'location' && winnr('$') == 1 | quit | endif
    " Use ctrl + t to open a new tab
    nnoremap <C-t> :call NewTab()<cr>
    " use tg to switch to the previous tab
    nnoremap tg :tabprevious<cr>
" }}}


" Numbers, Lines, and Folding
" {{{
    set number                                  " Display line numbers
    set relativenumber                          " Display relative line numbers
    set ruler                                   " Display cursor position
    set nojoinspaces                            " Prevent double spaces after a period
    set colorcolumn=80,100                      " Display a line at 80 and 100 characters
    " Sets the color column to grey, default is red
    highlight ColorColumn ctermbg=0 guibg=lightgrey
    set showcmd                                 " Display commands at the bottom of the screen
    set foldenable                              " Enable folding
    set foldlevelstart=10                          " Open up to 10 folds by default/start
    "set foldnestmax=10                          " Display at most up to 10 folds
    set foldmethod=indent                       " Fold based on indent level
    set textwidth=100                           " Set the default text width of 80
    set wrap                                    " Wrap lines
    autocmd BufReadPre, *.md setlocal textwidth=80

    set lbr                                     " Line break on 500 characters
    set tw=500                                  " Line break on 500 characters
"}}}


" Copy, Pasting, and Formatting
" {{{
    set pastetoggle=<leader>pp                   " Toggle Pasting with <leader>pp
    noremap <leader>y "*y                       " Copy highlights to the clipboard
    "noremap <leader>p "*p                       " Paste from clipboard
    noremap <leader>Y gg"*yG                    " Copy the whole buffer to the clipboard
" }}}


" Searching Criteria
" {{{
    set ignorecase                              " Ignore Case in searching criteria
    set smartcase                               " Override ignore case if search pattern has capitol letters
    set wildmode=longest,list                   " List all matches
    set showmatch                               " Highlight matching parenthesis/brackets
    set hlsearch                                " Highlight search results
    set incsearch                               " Show matches while typing pattern
" }}}


" Spell  Checking
" {{{
    " Turn on spell checking by default for markdown files
    autocmd BufRead,BufNewFile *.md setlocal spell
    " Turn on spell checking by default for git commit files
    autocmd BufRead,BufNewFile gitcommit setlocal spell
    " Turn on spell checking by default for tex files
    autocmd BufRead,BufNewFile *.tex setlocal spell
    " Turn on spell checking by default for html files
    autocmd BufRead,BufNewFile *.html setlocal spell
    " Turn on spell checking by default for txt files
    autocmd BufRead,BufNewFile *.txt setlocal spell
    " Turn on spell checking by default for yml files
    "autocmd BufRead,BufNewFile *.yml setlocal spell
    " Turn on spell checking by default for yaml files
    "autocmd BufRead,BufNewFile *.yaml setlocal spell
    " Set a red background for misspelled words
    hi SpellBad ctermbg=red

    " Map leader-ss to toggle spell checking
    map <leader>ss :setlocal spell!<CR>

    " map spellcheck shortcuts
    " next misspelling
    map <leader>sn ]s
    " previous misspelling
    map <leader>sp [s
    " Add to dictionary
    map <leader>sa zg
    " Show suggestions
    map <leader>s? z=
" }}}


" AutoCorrect Settings
" {{{
    " turn on AutoCorrect for text files
    autocmd BufRead,BufNewFile *.txt call AutoCorrect()
    " Turn on AutoCorrect for markdown files
    autocmd BufRead,BufNewFile *.md call AutoCorrect()
    " Turn on AutoCorrect for yaml files
    autocmd BufRead,BufNewFile *.yml call AutoCorrect()
    autocmd BufRead,BufNewFile *.yaml call AutoCorrect()
" }}}


" Flake8 Linter
" {{{
    " Lint any .py file on write
    autocmd BufWritePost *.py call Flake8()
" }}}


" Trailer Trash
" {{{
    " Set automatic highlighting in blue
    hi UnwantedTrailerTrash guibg=blue ctermbg=blue
    autocmd BufWritePost call Trim()            " trim trailing whitespace
    autocmd BufWritePost * TrailerTrim
" }}}


" Word Wrap
" {{{
    set wrap                                   " Wrap visually instead of changing text in buffer
    "set linebreak                               " Only wrap at characters listed in the breakat option
    "set nolist                                  " List disables linebreaks
"" }}}


" Indentation
" {{{
    set autoindent                              " Copy indentation from current line when starting new line
    "set copyindent                              " Copy structure of indentation from previous line, ex. comment symbols
    set expandtab                               " <Tab> inserts soft tabstop spaces. use <Ctrl>-V <Tab> to get reatl tabstop
    set tabstop=4                               " Set the number of spaces <Tab> equals to x
    set shiftwidth=4                            " Set the number of spaces to use for each auto-indent, ex. >>, <<, commands
    set softtabstop=4                           " Set the number of columns vim uses when you hit <Tab>
    set ai                                      " Auto indent
    set si                                      " Smart indent

    " See ~/.vim/indent/ for specific indentations and filtype settings

" }}}


" Undo and Backup
" {{{
    set undofile                                " Enable persistent undo commands for a file
    set undodir=~/.vim/.temp_dirs/undo//        " The directory to save undo files
    set undolevels=1000                         " The number of undo's to save (max=1000)
    set undoreload=10000                        " The number of undo's to reload upon open (max=10000)
    set backupdir=~/.vim/.temp_dirs/backup//    " The directory for vim to backup to
    set directory=~/.vim/.temp_dirs/swap//      " Set the directory to save vim files
" }}}

" NERDTree Settings
" {{{
    " Set NERDTree to open on left
    let g:NERDTreeWinPos = "left"
    " Use <leader>nn to toggle NERDTree
    nnoremap <leader>nn :NERDTreeToggle<cr>
    " Close NerdTree if its the only buffer open
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " Open NerdTree on start
    let g:nerdtree_tabs_open_on_console_startup=1
    autocmd vimenter * NERDTreeTabsToggle
    autocmd vimenter * 13 wincmd <
    autocmd VimEnter * wincmd l
    map <C-n> :NERDTreeTabsToggle<CR>
" }}}


" NERDTree File highlighting
" {{{
    function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    endfunction
    call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
    call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
    call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
    call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
    call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
    call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
    call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
    call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
    call NERDTreeHighlightFile('py', 'yellow', 'none', '#ffda4c', '#151515')
" }}}


" Tagbar Settings
" {{{
    "let Tagbar open on startup
    let g:tagbar_open_on_console_startup=1
    autocmd vimenter * TagbarOpen
    autocmd VimEnter * wincmd l
    autocmd VimEnter * 12 wincmd <
    autocmd VimEnter * wincmd h
    "Allow <leader>tb to open Tagbar
    nnoremap <leader>tb :TagbarToggle<cr>
" }}}


" Vim-Latex Settings
" {{{
    let g:tex_flavor = 'latex'
    let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $*'
    let g:Tex_DefaultTargetFormat = 'pdf'
    let g:Tex_ViewRUle_pdf = 'evince'
    let g:vimtex_disable_version_warning = 1
    let g:vimtex_compiler_latexmk = {'callback' : 0}
    set grepprg=grep\ -nH\ $*

     " View PDF macro; '%:r' is current file's root (base) name.
     nnoremap <leader>v :!open %:r.pdf &<CR><CR>
" }}}


" Key Remaps
" {{{
    " Cannot use inline comments otherwise they will be interpreted as part of the command
    " It is possible to do <command>| " Comment

    " Turn off highlighted search results with ,<space>
    nmap <silent> <leader><space> :nohlsearch<CR>
    " Disable highlight when <leader><CR> is pressed
    nmap <silent> <leader><CR> :hoh<CR>
    " Allow semicolon to insert a colon
    nnoremap ; :
    " Enter normal mode by hitting jk
    inoremap jk <esc>
    " Enter normal mode by hitting kj
    inoremap kj <esc>
    " Use E to get to the end of the lines
    nnoremap E $
    " Use B to get to the beginning of the lines
    nnoremap B ^
    " Press space bartwice to insert a space in normal mode
    nnoremap <space><space> i<space><esc>
    " Pres - to enter an empty line above in normal mode
    nnoremap - I<Return><esc>
    " Pres Ctrl-m to enter an empty line below in normal mode
    nnoremap <C-m> A<Return><esc>k
    " Press space bar and f to open/close folds
    nnoremap <space>f za
    " Press f twice then space to open all folds
    nnoremap ff<space> zR
    " Press spacebar, and f twice to close all folds
    nnoremap <space>ff zM
    " Press leader twice to switch between two buffers
    nnoremap    <leader><leader> <C-^>
    " Use H, J, K, L to switch buffers
    nnoremap H <C-w>h
    nnoremap J <C-w>j
    nnoremap K <C-w>k
    nnoremap L <C-w>l
    " Press v twice to hightlight an entire line in normal mode
    nnoremap vv V
    " :W sudo saves the file
    command! W execute 'w !sudo tee % > /dev/null' <bar> edit!
    " Allow qq to quit without typing !
    cnoremap qq q!
    " Call Number Toggle with <ctrl> + l
    nnoremap <C-l> :call NumberToggle()<cr>
    inoremap <C-l> <esc>:call NumberToggle()<cr>i
" }}}



" Compilation
" {{{
    autocmd FileType tex set makeprg=pdflatex\ %
    autocmd FileType javascript set makeprg=node\ %
    autocmd FileType python set makeprg=python\ %
    autocmd FileType sh set makeprg=sh\ %
    nnoremap <leader>c :make<CR>
" }}}

" Number Toggle Function
" {{{
    function! NumberToggle()
        if(&relativenumber == 1)
            set norelativenumber
        else
            set relativenumber
        endif
    endfunc
" }}}


" New Tab Function
" {{{
    function! NewTab()
       :tabnew
       :TagbarOpen
       :wincmd l
       :12 wincmd <
       :wincmd h
    endfunc
" }}}


" Use <C-h for switching between hex mode
" {{{
    nnoremap <C-H> :Hexmode<CR>
    inoremap <C-H> <Esc>:Hexmode<CR>
    vnoremap <C-H> :<C-U>Hexmode<CR>
    command -bar Hexmode call ToggleHex()
    function ToggleHex()
        " hex mode should be considered a read-only operation
        " save values for modified and read-only for restoration later,
        " and clear the read-only flag for now
        let l:modified=&mod
        let l:oldreadonly=&readonly
        let &readonly=0
        let l:oldmodifiable=&modifiable
        let &modifiable=1
        if !exists("b:editHex") || !b:editHex
            " save old options
            let b:oldft=&ft
            let b:oldbin=&bin
            " set new options
            setlocal binary " make sure it overrides any textwidth, etc.
            silent :e " this will reload the file without trickeries
                      "(DOS line endings will be shown entirely )
            let &ft="xxd"
            " set status
            let b:editHex=1
            " switch to hex editor
            %!xxd
        else
            " restore old options
            let &ft=b:oldft
            if !b:oldbin
                setlocal nobinary
            endif
            " set status
            let b:editHex=0
            " return to normal editing
            %!xxd -r
        endif
        " restore values for modified and read only state
        let &mod=l:modified
        let &readonly=l:oldreadonly
        let &modifiable=l:oldmodifiable
    endfunction
" }}}


" Make searches always 'very magic'
" {{{
    nnoremap / /\v
    cnoremap %s/ %s/\v
" }}}


" Jump to last known position in a file just after opening it
" {{{
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" }}}


" Clear searches when opening files
" {{{
    autocmd BufReadPre <buffer> :let @/ = ""
" }}}


" Use JavaScript syntax highlighting for JSON files
" {{{
    autocmd BufNewFile, BufRead *.json set ft=javascript
" }}}

" Paste Helper Function
" {{{
    " Return true if paste mode is enabled
    function! HasPaste()
        if &paste
            return 'PASTE MODE  '
        endif
        return ''
    endfunction
" }}}


"Get vim to open this file folded for easier readability
" {{{
        " How this works:
        " foldmethod=marker tells vim to use markers instead of tabs
        " foldlevel=0 tells vim to fold everything
        " Because we set foldmethod to markers, we must wrap each section with {{{ to start, and }}} to end:
        "     example:
        "               " Section Name {{{
        "               section commands " These will be folded
        "               " }}}
" }}}

set modelines=1                             " Set vim to only use these settings for THIS file
" THIS NEXT LINE MUST BE AT THE BOTTOM OF THE FILE, AND LEFT COMMENTED OUT!!!!!!!!!!!!
" vim:foldmethod=marker:foldlevel=0
